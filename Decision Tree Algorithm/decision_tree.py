# -*- coding: utf-8 -*-
"""decision tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KZzKzFp3gS-43xm3xyrgrxiRT4sHfQXK
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as pltimg
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

df = pd.read_csv('/content/dataset.csv')

df

df.head

df.columns.tolist()

df['pha'].value_counts()

df['neo'].value_counts()

df.describe()

df.isnull().sum()

"""dropna for using  any columns has missing or null value so dropna remove the missing value"""

removableData = ['diameter', 'H', 'albedo', 'diameter_sigma', 'moid', 'moid_ld', 'sigma_e', 'sigma_a', 'sigma_q', 'sigma_i', 'sigma_om', 'sigma_w', 'sigma_ma', 'sigma_ad', 'sigma_n', 'sigma_tp', 'sigma_per', 'pha', 'neo']
df = df.dropna(subset=removableData)
df.isnull().sum()

df1=df.drop(columns=['pdes', 'name', 'prefix', 'id', 'spkid', 'full_name', 'equinox', 'orbit_id'], axis=True)

df

df1

df1.isnull().sum()

df1.columns

df['neo'].replace(['N', 'Y ', 'Y'],
           [0, 1, 1], inplace=True)
df['neo'] = df['neo'].astype(int)
df['pha'].replace(['N', 'Y ', 'Y'],
           [0, 1, 1], inplace=True)
df['pha'] = df['pha'].astype(int)
df

x=df[['neo', 'H', 'diameter', 'albedo', 'diameter_sigma', 'epoch',
       'epoch_mjd', 'epoch_cal', 'e', 'a', 'q', 'i', 'om', 'w', 'ma', 'ad',
       'n', 'tp', 'tp_cal', 'per', 'per_y', 'moid', 'moid_ld', 'sigma_e',
       'sigma_a', 'sigma_q', 'sigma_i', 'sigma_om', 'sigma_w', 'sigma_ma',
       'sigma_ad', 'sigma_n', 'sigma_tp', 'sigma_per', 'rms']]
y=df['pha']

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=10)



from sklearn.tree import DecisionTreeClassifier
clf_en = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)
clf_en.fit(x_train, y_train)
y_pred_en = clf_en.predict(x_test)

y_pred= clf_en.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")